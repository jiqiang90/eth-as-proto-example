"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRef = void 0;
const names_1 = require("../names");
const assert = __importStar(require("assert"));
const descriptor_pb_1 = require("google-protobuf/google/protobuf/descriptor_pb");
function generateRef(fieldDescriptor, fileContext) {
    assert.ok(fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_MESSAGE ||
        fieldDescriptor.getType() === descriptor_pb_1.FieldDescriptorProto.Type.TYPE_ENUM);
    const fieldTypeName = fieldDescriptor.getTypeName();
    assert.ok(fieldTypeName !== undefined);
    const fileDescriptor = fileContext
        .getGeneratorContext()
        .getFileDescriptorByFieldTypeName(fieldTypeName);
    assert.ok(fileDescriptor !== undefined);
    const isSameFile = fileContext.getFileDescriptor() === fileDescriptor;
    const typeName = (0, names_1.getTypeName)(fieldTypeName);
    if (isSameFile) {
        return fileContext.registerDefinition(typeName);
    }
    else {
        const fileName = fileDescriptor.getName();
        assert.ok(fileName);
        return fileContext.registerImport(typeName, (0, names_1.ensureRelativeImportDot)((0, names_1.getPathWithoutProto)(fileName)));
    }
}
exports.generateRef = generateRef;

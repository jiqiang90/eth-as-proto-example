"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateFile = void 0;
const message_1 = require("./message");
const enum_1 = require("./enum");
const header_1 = require("./header");
const assert = __importStar(require("assert"));
function generateFile(fileDescriptor, fileContext, compilerOptions, compilerVersion) {
    const fileName = fileDescriptor.getName();
    assert.ok(fileName);
    const filePackage = fileDescriptor.getPackage();
    const types = [];
    for (const messageDescriptor of fileDescriptor.getMessageTypeList()) {
        types.push((0, message_1.generateMessage)(messageDescriptor, fileContext, compilerOptions));
    }
    for (const enumDescriptor of fileDescriptor.getEnumTypeList()) {
        types.push((0, enum_1.generateEnum)(enumDescriptor, fileContext));
    }
    let NamespacedTypes = types.join("\n\n");
    if (filePackage) {
        const packageParts = filePackage.split(".");
        fileContext.registerDefinition(packageParts[0]);
        while (packageParts.length > 0) {
            const packagePart = packageParts.pop(); // type assertion - see line above
            NamespacedTypes = `
        export namespace ${packagePart} {
          ${NamespacedTypes}
        }
      `;
        }
    }
    return [
        (0, header_1.generateHeaderComment)(compilerVersion),
        fileContext.getImportsCode(),
        NamespacedTypes,
    ].join("\n");
}
exports.generateFile = generateFile;

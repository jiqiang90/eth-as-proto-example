// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.9.1
//   protoc        v3.21.9

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class EthereumLog {
  static encode(message: EthereumLog, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.index);

    writer.uint32(18);
    writer.string(message.transactionHash);

    writer.uint32(24);
    writer.uint32(message.transactionIndex);

    writer.uint32(34);
    writer.string(message.blockHash);

    writer.uint32(40);
    writer.uint64(message.blockNumber);

    writer.uint32(50);
    writer.string(message.address);

    writer.uint32(58);
    writer.string(message.data);

    const topics = message.topics;
    if (topics.length !== 0) {
      for (let i: i32 = 0; i < topics.length; ++i) {
        writer.uint32(66);
        writer.string(topics[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): EthereumLog {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthereumLog();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.index = reader.uint32();
          break;

        case 2:
          message.transactionHash = reader.string();
          break;

        case 3:
          message.transactionIndex = reader.uint32();
          break;

        case 4:
          message.blockHash = reader.string();
          break;

        case 5:
          message.blockNumber = reader.uint64();
          break;

        case 6:
          message.address = reader.string();
          break;

        case 7:
          message.data = reader.string();
          break;

        case 8:
          message.topics.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  index: u32;
  transactionHash: string;
  transactionIndex: u32;
  blockHash: string;
  blockNumber: u64;
  address: string;
  data: string;
  topics: Array<string>;

  constructor(
    index: u32 = 0,
    transactionHash: string = "",
    transactionIndex: u32 = 0,
    blockHash: string = "",
    blockNumber: u64 = 0,
    address: string = "",
    data: string = "",
    topics: Array<string> = []
  ) {
    this.index = index;
    this.transactionHash = transactionHash;
    this.transactionIndex = transactionIndex;
    this.blockHash = blockHash;
    this.blockNumber = blockNumber;
    this.address = address;
    this.data = data;
    this.topics = topics;
  }
}

export function encodeEthereumLog(message: EthereumLog): Uint8Array {
  return Protobuf.encode(message, EthereumLog.encode);
}

export function decodeEthereumLog(buffer: Uint8Array): EthereumLog {
  return Protobuf.decode<EthereumLog>(buffer, EthereumLog.decode);
}

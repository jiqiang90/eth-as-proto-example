// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.9.1
//   protoc        v3.21.9

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class EVMLog {
  static encode(message: EVMLog, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    writer.uint32(18);
    writer.string(message.address);

    writer.uint32(24);
    writer.uint64(message.blockHeight);

    writer.uint32(34);
    writer.string(message.topics0);

    writer.uint32(42);
    writer.string(message.topics1);

    writer.uint32(50);
    writer.string(message.topics2);

    writer.uint32(58);
    writer.string(message.topics3);
  }

  static decode(reader: Reader, length: i32): EVMLog {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EVMLog();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.address = reader.string();
          break;

        case 3:
          message.blockHeight = reader.uint64();
          break;

        case 4:
          message.topics0 = reader.string();
          break;

        case 5:
          message.topics1 = reader.string();
          break;

        case 6:
          message.topics2 = reader.string();
          break;

        case 7:
          message.topics3 = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  address: string;
  blockHeight: u64;
  topics0: string;
  topics1: string;
  topics2: string;
  topics3: string;

  constructor(
    id: string = "",
    address: string = "",
    blockHeight: u64 = 0,
    topics0: string = "",
    topics1: string = "",
    topics2: string = "",
    topics3: string = ""
  ) {
    this.id = id;
    this.address = address;
    this.blockHeight = blockHeight;
    this.topics0 = topics0;
    this.topics1 = topics1;
    this.topics2 = topics2;
    this.topics3 = topics3;
  }
}

export function encodeEVMLog(message: EVMLog): Uint8Array {
  return Protobuf.encode(message, EVMLog.encode);
}

export function decodeEVMLog(buffer: Uint8Array): EVMLog {
  return Protobuf.decode<EVMLog>(buffer, EVMLog.decode);
}
